/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.12 ./public/earth.glb -t 
*/

import * as THREE from 'three'
import { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import getRadian from "./utility/getRadian"
import gsap from 'gsap'
type GLTFResult = GLTF & {
  nodes: {
    Cube001: THREE.Mesh
  }
  materials: {
    ['Default OBJ']: THREE.MeshStandardMaterial
  }
}

// type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

import { useState, useEffect } from 'react'



export function Earth(props: JSX.IntrinsicElements['group']) {

  const earthRef = useRef<THREE.Group | null>(null)
  const [refSet, setRefSet] = useState<boolean>(false);

  useEffect(() => {
    const animation = gsap.context(() => {
      if (earthRef.current) {
        const earth = earthRef.current
        gsap.to(earth.rotation, {
          y: getRadian(360),
          duration: 30,
          ease: "none",
          repeat: -1
        }
        )
      }
    })
    return () => {
      animation.revert

    }
  }, [refSet])


  const { nodes, materials } = useGLTF('/Earth.glb') as GLTFResult
  return (
    <group {...props} dispose={null} ref={(ref) => {
      earthRef.current = ref;
      setRefSet((prev) => !prev)
    }
    } >
      <mesh geometry={nodes.Cube001.geometry} material={materials['Default OBJ']} />
    </group>
  )
}

useGLTF.preload('/Earth.glb')
